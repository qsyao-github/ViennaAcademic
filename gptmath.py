from openai import OpenAI
from executeCode import execute_code_math
import re
from gradio_client import Client


def qwenmath(question):
    client = Client("Qwen/Qwen2.5-Math-Demo")
    result = client.predict(image=None,
                            sketchpad=None,
                            question=question,
                            api_name="/math_chat_bot")
    print(result)
    return result


client1 = OpenAI(api_key="114514",
                 base_url="https://114514.com/v1")


def gptChat(message):
    response = client1.chat.completions.create(model="gpt-4o-mini",
                                               messages=message)
    print(response.choices[0].message.content)
    return response.choices[0].message.content


def pythonCall(answer):
    # 去掉原本存在的```output块
    answer = re.sub(r'```output\n(.*?)```', '', answer, flags=re.DOTALL)
    # 执行结果替换
    pattern = r'```python(.*?)```'

    def repl(match):
        code = match.group(1).strip()
        result = '```python\n' + code + '```\n' + '```output\n' + execute_code_math(
            code) + '```'  # 执行代码并获取结果
        return result  # 用执行结果替换代码

    # 执行替换
    replaced_text = re.sub(pattern, repl, answer, flags=re.DOTALL)
    print(replaced_text)
    return replaced_text


def solve(question):
    # translation
    translateMessage = [{
        "role":
        "system",
        "content":
        """You'll be given a math problem. Translated into English. If its already in English, leave it unchanged. Return the translated or unchanged problem only."""
    }, {
        "role": "user",
        "content": question
    }]
    question = gptChat(translateMessage)
    # qwen inference
    answer = qwenmath(question)
    # verification
    verifyMessage = [{
        "role":
        "system",
        "content":
        """You'll be given a question and an answer. The answer is generated by LLM, thus may possess calculation/symbolic manipulation errors. Write ONE python program:
For each expression in the answer, verify them using python/sympy if you believe results could be obtained in reasonable time, and print the result out.
You needn't write the program if no calculation(or reasonable calculation) is present.
You cannot see the result of your program, do not make them up. These results will be checked by another LLM."""
    }, {
        "role":
        "user",
        "content":
        'Question:\n' + question + "\nAnswer:\n" + answer
    }]
    verification = pythonCall(gptChat(verifyMessage))
    verifyMessage.append({
        "role": "assistant",
        "content": 'Verification program:\n' + verification
    })
    tempVerification = ""
    while '#submit' not in tempVerification:
        verifyMessage[0] = {
            "role":
            "system",
            "content":
            """You'll be given a question, an answer, and a verification program. 
If the program runs without error, or no program is given at all, return '#submit'.
If the program results in error, return the corrected program, do not return '#submit'. Make sure only relevant information are printed. You cannot see the result of your program, do not make them up. These results will be checked by another LLM."""
        }
        tempVerification = pythonCall(gptChat(verifyMessage))
        if '#submit' not in tempVerification:
            verifyMessage[2] = {
                "role": "assistant",
                "content": tempVerification
            }
            break

    verifyMessage[0] = {
        "role":
        "system",
        "content":
        """You'll be given a question, an answer, and a verification program. The answer is generated by LLM, thus may possess calculation errors. You can refer to the verification program for correction.
You're taking a math test. Rephrase the answer given in rigorous mathematical language, substituting wrong calculation with correct ones from the verification program. You must include a rigorous reasoning and wrap the final answer in \\boxed{}, and return nothing else. """
    }
    finalAnswer = gptChat(verifyMessage)
    translateMessage = [{
        "role": "system",
        "content": """下文是一个数学问题的解题过程及答案，将其译为中文"""
    }, {
        "role": "user",
        "content": finalAnswer
    }]
    finalAnswerChi = gptChat(translateMessage)
    return finalAnswerChi + '\n\n' + finalAnswer
