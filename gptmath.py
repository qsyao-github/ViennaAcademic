from modelclient import client1
import regex as re
import subprocess
import time


def execute_code_math(code):
    # 将code写入temp.py中，用subprocess运行，返回文本形式结果
    with open('temp.py', 'w', encoding='utf-8') as f:
        f.write(code)

    process = subprocess.Popen(['python', 'temp.py'],
                               stdout=subprocess.PIPE,
                               stderr=subprocess.PIPE,
                               text=True)
    start_time = time.time()

    # 等待进程结束或超时
    while True:
        if process.poll() is not None:  # 进程已经结束
            break
        if time.time() - start_time > 10:  # 超过时间限制
            process.terminate()  # 终止进程
            return "Verification time out, return #submit directly"
        time.sleep(0.1)  # 避免过于频繁的检查

    stdout, stderr = process.communicate()
    return stdout if stdout else '' + stderr if stderr else ''


def qwenmath(question):
    response = client1.chat.completions.create(model="qwq-32b-preview",
                                               messages=[{"role":"user","content":question}])
    return response.choices[0].message.content


def gptChat(message):
    response = client1.chat.completions.create(model="gpt-4o-mini",
                                               messages=message)
    return response.choices[0].message.content


def claudeChat(message):
    response = client1.chat.completions.create(model="claude-3-haiku",
                                               messages=message)
    return response.choices[0].message.content


def pythonCall(answer):
    # 去掉原本存在的```output块
    answer = re.sub(r'```output\n(.*?)```', '', answer, flags=re.DOTALL)
    # 执行结果替换
    pattern = r'```python(.*?)```'

    def repl(match):
        code = match.group(1).strip()
        result = '```python\n' + code + '```\n' + '```output\n' + execute_code_math(
            code) + '```'  # 执行代码并获取结果
        return result  # 用执行结果替换代码

    # 执行替换
    replaced_text = re.sub(pattern, repl, answer, flags=re.DOTALL)
    return replaced_text


def solve(question):
    # translation
    translateMessage = [{
        "role":
        "system",
        "content":
        """You'll be given problem. Translated into English. If its already in English, leave it unchanged. Return the translated or unchanged problem only."""
    }, {
        "role": "user",
        "content": question
    }]
    question = gptChat(translateMessage)
    # qwen inference
    answer = qwenmath(question)
    # rewrite
    rewriteMessage = [{
        "role":
        "system",
        "content":
        """You'll be given a question and a thought process. You're taking an exam. Rephrase the thought process given rigorously in markdown, only include necessary reasoning that contributes to the rigorousness of the thought process, and return nothing else."""
    }, {
        "role":
        "user",
        "content":
        'Question:\n' + question + "\nAnswer:\n" + answer
    }]
    answer = claudeChat(rewriteMessage)
    # verification
    verifyMessage = [{
        "role":
        "system",
        "content":
        """You'll be given a question and a thought process. The thought process is generated by LLM, thus may possess calculation/symbolic manipulation errors. Write ONE python program:
For each expression in the answer, recalculate them using python/sympy if you believe results could be obtained in reasonable time, and print the result out.
You needn't write the program if no calculation(or reasonable calculation) is present.
You cannot see the result of your program, do not make them up. These results will be checked by another LLM."""
    }, {
        "role":
        "user",
        "content":
        'Question:\n' + question + "\nAnswer:\n" + answer
    }]
    verification = pythonCall(gptChat(verifyMessage))
    verifyMessage.append({
        "role": "assistant",
        "content": 'Verification program:\n' + verification
    })
    tempVerification = ""
    while '#submit' not in tempVerification:
        verifyMessage[0] = {
            "role":
            "system",
            "content":
            """You'll be given a question, an answer, and a verification program. 
If the program runs without error, or no program is given at all, return '#submit'.
If the program results in error, return the corrected program, do not return '#submit'. Make sure only relevant information are printed. You cannot see the result of your program, do not make them up. These results will be checked by another LLM."""
        }
        tempVerification = pythonCall(gptChat(verifyMessage))
        if '#submit' not in tempVerification:
            verifyMessage[2] = {
                "role": "assistant",
                "content": tempVerification
            }
            break

    verifyMessage[0] = {
        "role":
        "system",
        "content":
        """You'll be given a question, a thought process, and a verification program. The thought process is generated by LLM, thus may possess calculation errors. You can refer to the verification program for correction.
You're taking a exam. Rephrase the thought process given rigorously, substituting wrong calculation with correct ones from the verification program. You must include a rigorous reasoning and wrap the final answer in \\boxed{}, and return nothing else. """
    }
    finalAnswer = gptChat(verifyMessage)
    translateMessage = [{
        "role": "system",
        "content": """下文是一个问题的解题过程及答案，将其译为中文"""
    }, {
        "role": "user",
        "content": finalAnswer
    }]
    finalAnswerChi = gptChat(translateMessage)
    return finalAnswerChi + '\n\n' + finalAnswer
